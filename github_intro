Git commands


commit   - uploads of files that act as check points you can revert back too.

; git add gitText   -add files to the staging area in this case we are adding the file gitText, 

; git commit -m 'First commit'   - commit everything in staging area. Saves a new checkpoint

git log  - shows a log of recent changes

q   - exit git log




Git workflow


So, let's sum up the steps we've done so far:

We created a folder for a new project
We initialised a repository inside it
We created some files
We added them to the staging area
We committed them
We created a repo on GitHub
We created a remote called "origin" pointing to GitHub
We pushed the code to the origin
Whenever you are starting work on a new project, follow these steps. Create a new repository (actually, it doesn't matter where you create it first, you can try creating it first on GitHub and then locally). Create a remote pointing to GitHub. Commit a few changes, regularly push them to GitHub.

You need to be in the directory where the repository is in order to push your data to GitHub. When you do git push or a similar command, git applies it to the directory you are in, so if you're in a wrong directory you won't get the results you expect.




File organisation


You already know that you should have a separate directory initialised as a git repo for every project. It's convenient to have a separate directory for all projects you'll have. For example, you can create a Projects directory in your home directory:

; mkdir ~/Projects

Then when you need to start a new project, create a new folder inside it:

; cd ~/Projects
; mkdir code-practice
; cd code-practice

Then initialise it and add a README file:

; git init
; echo "Introductory Exercises" > README
; git add README
; git commit -m "Initial commit"

If you then need to work with another project you created before, move to that directory:

; cd ~/Projects/command-line-practice

and then do the same there: some changes, commits and pushes to GitHub.

